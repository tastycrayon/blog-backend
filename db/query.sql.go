// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.16.0
// source: query.sql

package db

import (
	"context"
)

const getPostsByCategoy = `-- name: GetPostsByCategoy :many
SELECT post_id FROM post_category WHERE category_id=?
`

func (q *Queries) GetPostsByCategoy(ctx context.Context, id int64) ([]int64, error) {
	rows, err := q.db.QueryContext(ctx, getPostsByCategoy, id)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []int64
	for rows.Next() {
		var post_id int64
		if err := rows.Scan(&post_id); err != nil {
			return nil, err
		}
		items = append(items, post_id)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getUser = `-- name: GetUser :one
SELECT id, user_name, user_email, user_pass, user_activation_key, user_role, display_name, user_image, created_at, updated_at
FROM users
WHERE ID = ?
LIMIT 1
`

func (q *Queries) GetUser(ctx context.Context, id int64) (User, error) {
	row := q.db.QueryRowContext(ctx, getUser, id)
	var i User
	err := row.Scan(
		&i.ID,
		&i.UserName,
		&i.UserEmail,
		&i.UserPass,
		&i.UserActivationKey,
		&i.UserRole,
		&i.DisplayName,
		&i.UserImage,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const getUsers = `-- name: GetUsers :many
SELECT id, user_name, user_email, user_pass, user_activation_key, user_role, display_name, user_image, created_at, updated_at
FROM users
`

func (q *Queries) GetUsers(ctx context.Context) ([]User, error) {
	rows, err := q.db.QueryContext(ctx, getUsers)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []User
	for rows.Next() {
		var i User
		if err := rows.Scan(
			&i.ID,
			&i.UserName,
			&i.UserEmail,
			&i.UserPass,
			&i.UserActivationKey,
			&i.UserRole,
			&i.DisplayName,
			&i.UserImage,
			&i.CreatedAt,
			&i.UpdatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}
