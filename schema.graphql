# GraphQL schema

#
# Queries
#
type Query {
  getUsers: [User]
  getUser(id: ID!): User

  getPosts(limit: Int!, offset: Int!, orderBy: String): [Post!]!
  getPostsWithCategory(limit: Int!, offset: Int!, orderBy: String): [PostCat!]!
  getPostsByCategory(
    limit: Int!
    offset: Int!
    orderBy: String
    cat: String!
  ): [Post!]!
  getPost(id: ID!): Post
  getPostBySlug(slug: String!): Post
  getPostWithCatBySlug(slug: String!): PostCat
  getPostCount(cat: String): Int!

  getImage(id: ID!): Image

  getCategories: [Category!]

  login(emailOrUsername: String!, password: String!): LoginResponse
  logout(emailOrUsername: String!, password: String!): Boolean
}

#
# Mutations
#
type Mutation {
  addImage(
    image_title: String
    image_url: String!
    thumbnail_url: String
    height: Int!
    width: Int!
  ): MutationResponse!

  addPost(
    post_title: String!
    post_slug: String
    post_content: String
    authorid: ID!
    imageId: ID!
  ): MutationResponse!
}

#
# Response Messages
#
type LoginResponse {
  access_token: String
  exp: String
}

type MutationResponse {
  code: Int!
  "Indicates whether the mutation was successful"
  success: Boolean!
  "Human-readable message for the UI"
  message: String!
  "Newly updated result after a successful mutation"
  result: ID!
}

#
# Types
#

scalar Time

type Post {
  ID: Int!
  post_title: String!
  post_slug: String!
  post_content: String!
  post_image: Image
  post_author: User!
  created_at: Time!
  updated_at: Time!
}
type PostCat {
  post: Post!
  categories: [Category!]
}
type Category {
  ID: Int!
  category_title: String!
  category_slug: String!
  description: String
  created_at: Time!
  updated_at: Time!
}
type User {
  ID: Int!
  user_name: String!
  user_email: String!
  # fix it later
  display_name: String
  user_image: Image
  created_at: Time!
  updated_at: Time!
}
type Image {
  ID: Int!
  image_title: String!
  image_url: String!
  thumbnail_url: String
  height: Int!
  width: Int!
  created_at: Time!
  updated_at: Time!
}
